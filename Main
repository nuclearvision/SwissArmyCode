/* SwissArmyCode.cpp - Code Sample Provided to ORNL as part of application to 
 the Research Software Engineer position in the Computer Science and Mathematics 
 Division.
 
 This application has five modules:
 1) Cellular automata
    Requests a 7-digit seed from std in and generates a 1-d cellular automaton
	which is print to std out. The user is given the option to convert the rows
	of the cellular automaton from binary to decimal. 
 
 2)Sort
	Requests an array from std input and provides user the option of
	sorting it by either quicksort, insertionsort or selectionsort.
 
 3) Mad Lib
    From Wikipedia: A Mad Lib is a phrasal template word game where one player 
	prompts others for a list of words to substitute for blanks in a story, 
	before reading the – often comical or nonsensical – story aloud. 
	The Mad Lib module included in this code sample is based on my conversion from 
	Theater major to Physicist. 
	
 4) Fibonacci Calculator
	An optimized procedure for returning the nth fibonacci number, where n is 
	supplied from std in.
 
 5) 4-function calculator
    Your typical 4 - function calculator. Reads a formula from std in in the 
	form of a + b and returns the result. Includes some modern error-handling 
	techiniques for dealing with improperly formatted input.

In general, input is taken from std cin so as to avoid the need for
creation or distribution of input files. Similarly, a single-file
approach to this project was taken to avoid distribution of header files;
everything you need is right here in SwissArmyCode.cpp.

Thank you for the opportunity to provide this code sample. I had fun writing it,
and I look forward to the possibility of further discussions! 

	-Adam 


*/

#include "stdafx.h"
#include<iostream>
#include<fstream>
#include <string>
#include<sstream>
#include<algorithm>
#include<iterator>
#include<iomanip>
#include<istream>
#include<math.h>
using namespace std;

// Cellular Automaton Class
class CA {
	int seed1, seed2, seed3, seed4, seed5, seed6, seed7;
	int x_last_left, x_last_mid, x_last_right, x_new;
	int rem, dummy, dec, bin, base;
public:
	void set_seed(int, int, int, int, int, int, int);
	void set_x_last(int, int, int);
	void BinNum(int);
	int rthirty();
	/*
	CA Rule 30 behavior for each triplet in previous line
	current pattern       111 110 101 100 011 010 001 000
	new state for center cell 	0 	0 	0 	1 	1 	1 	1 	0
	*/

};
// CA functions

// Function to set the relevant values for rthirty()
void CA::set_x_last(int x, int y, int z) {
	x_last_left = x;
	x_last_mid = y;
	x_last_right = z;

}

int CA::rthirty() {
	//Function to evaluate the  relevant values according to rthirty()
	if ((x_last_left == 0 && x_last_mid == 0 && x_last_right == 1) ||
		(x_last_left == 0 && x_last_mid == 1 && x_last_right == 0) ||
		(x_last_left == 0 && x_last_mid == 1 && x_last_right == 1) ||
		(x_last_left == 1 && x_last_mid == 0 && x_last_right == 0))
	{
		return 1;
	}
	else
	{
		return 0;
	}

}

// convert CA line to decimal 
void CA::BinNum(int bin) {
	dummy = bin;
	dec = 0;
	base = 1;
	while (dummy > 0) {
		rem = dummy % 10;
		dec = dec + rem * base;
		base = base * 2;
		dummy = dummy / 10;
	}
	cout << setfill('0') << setw(7) << bin << " = " << dec << endl;
}
// Class for array sorting module
class Sort {
	
public:

	//Quicksort
	void qSort(int array[], int left, int right) {
		int i = left, j = right;
		int temp;
		int pivot = array[(left + right) / 2];

		// partition 
		while (i <= j) {
			while (array[i] < pivot)
				i++;
			while (array[j] > pivot)
				j--;
			if (i <= j) {
				temp = array[i];
				array[i] = array[j];
				array[j] = temp;
				i++;
				j--;
			}
		};
		// recursion 
		if (left < j)
			qSort(array, left, j);
		if (i < right)
			qSort(array, i, right);

	}
	// Insertion Sort
	void iSort(int array[], int n) {
		int i, j, temp;
		for (i = 1; i < n; i++) {
			j = i;
			while (j > 0 && array[j - 1] > array[j]) {
				temp = array[j];
				array[j] = array[j - 1];
				array[j - 1] = temp;
				j--;
			}
		}
	}
	// Selection Sort
	void sSort(int array[], int n) {
		int i, j, minIndex, temp;
		for (i = 0; i < n - 1; i++) {
			minIndex = i;
			for (j = i + 1; j < n; j++)
				if (array[j] < array[minIndex])
					minIndex = j;
			if (minIndex != i) {
				temp = array[i];
				array[i] = array[minIndex];
				array[minIndex] = temp;
			}
		}
	}
};


// class for MadLib module functions
class MadLib {

public:
	void GetLib(std::string, std::string, std::string, std::string,
		std::string, std::string, std::string, std::string,
		std::string, std::string, std::string, std::string,
		std::string, std::string, std::string,std::string,
		std::string, int);
	void OriginalStory();

};
// MadLib Functions
void MadLib::GetLib(std::string FName, std::string LName,
	std::string EngT, std::string ProgL, std::string adj1,
	std::string noun1, std::string adj2, std::string plnoun1,
	std::string adj3, std::string adj4, std::string adj5, std::string noun2,
	std::string noun3, std::string Place1, std::string Place2, std::string Place3, std::string Place4, int LOT) {
	cout << endl << FName << "  is ";
	if (EngT.at(0) == 'a' || EngT.at(0) == 'e' || EngT.at(0) == 'i' || EngT.at(0) == 'o' || EngT.at(0) == 'u' ||
		EngT.at(0) == 'A' || EngT.at(0) == 'E' || EngT.at(0) == 'I' || EngT.at(0) == 'O' || EngT.at(0) == 'U')
		cout << " an ";
	else cout << " a ";
	cout << EngT << " Engineer who has been coding in " << ProgL << " for approximately " << LOT << " years. Before";
	cout << " discovering that he enjoyed writing code, " << FName << " underwent classical " << noun1 << " training during ";
	cout << "his senior year in high school as well as for three years in college. One " << adj2 << " night, " << FName;
	cout << " and his " << plnoun1 << " were visiting the 'free section' at the " << adj3 << " book store in " << Place1;
	cout << " where he discovered ";
	if (adj4.at(0) == 'a' || adj4.at(0) == 'e' || adj4.at(0) == 'i' || adj4.at(0) == 'o' || adj4.at(0) == 'u' ||
		adj4.at(0) == 'A' || adj4.at(0) == 'E' || adj4.at(0) == 'I' || adj4.at(0) == 'O' || adj4.at(0) == 'U')
		cout << " an ";
	else cout << " a ";
	cout << adj4 << " " << noun2 << "  book which he used ";
	cout << "to teach himself " << noun2 << ". Adam enjoyed learning " << noun2 << " so much that he";
	cout << " dropped out of " << noun1 << " school in order to pursue " << noun3 << " at the University of ";
	cout << Place4 << " at " << Place3 << "." << endl;

}
void MadLib::OriginalStory() {
	cout << "Adam is a Nuclear Engineer who has been coding in C++ for approximately";
	cout << endl << "15 years. Before discovering that he enjoyed writing code, Adam underwent";
	cout << endl << "classical theatre training during his senior hear in high school as well as";
	cout << endl << "for three years in college. One fateful night, Adam and his friends were ";
	cout << endl << "visiting the 'free section' at the used book store in Raleigh where he ";
	cout << endl << "discovered a used calculus book which he used to teach himself calculus. ";
	cout << endl << "Adam enjoyed learning calculus so much that he dropped out of Drama School";
	cout << endl << "in order to pursue Physics at the University of North Carolina at Greensboro."<<endl;

}
// Class containing functions for Fibonacci calculations
// again, long long ints are used to extend the domain of requestable Fibonacci numbers
class Fibs {
	long long int F[2][2], M[2][2];
public:
	void mult(long long int[2][2], long long int[2][2]);
	void mPow(long long int[2][2], long long int);

	long long int fibs(long long int n)
	{
		long long int F[2][2] = { { 1,1 },{ 1,0 } };
		if (n == 0)
			return 0;
		mPow(F, n - 1);
		return F[0][0];
	}

};
/* Fibonacci Functions
 Matrix multiplication for 2x2 matrices F and M
 use long long int to extend range of available Fibonacci numbers*/
void Fibs::mult(long long int F[2][2], long long int M[2][2]) {
	long long int x = F[0][0] * M[0][0] + F[0][1] * M[1][0];
	long long int y = F[0][0] * M[0][1] + F[0][1] * M[1][1];
	long long int z = F[1][0] * M[0][0] + F[1][1] * M[1][0];
	long long int w = F[1][0] * M[0][1] + F[1][1] * M[1][1];

	F[0][0] = x;
	F[0][1] = y;
	F[1][0] = z;
	F[1][1] = w;

}
// Raise Matrix F to power n
void Fibs::mPow(long long int F[2][2],  long long int n)
{
	if (n == 0 || n == 1)
		return;
	long long int M[2][2] = { { 1,1 },{ 1,0 } };
	Fibs fib;
	fib.mPow(F, n / 2);
	fib.mult(F, F);

	if (n % 2 != 0)
		fib.mult(F, M);
}


class Calc {
	double x, y;
	std::string operation;
public:
	double BinOp(double, double, string);
	void opError(string);
	void DivByZ(string, double);
	void WhiteSpace(string);
};

// Calc member dunctions
// function to perform the binary operation
double Calc::BinOp(double x, double y, string operation) {
	if (operation == "+") 	return x + y;
	else if (operation == "-") return x - y;
	else if (operation == "*") return x * y;
	else if (operation == "/") return x / y;
	else return 0;
}


// function to throw an exception if an invalid operation symbol is input
void Calc::opError(string operation) {
	if (operation != "+" && operation != "-" && operation != "*" && operation != "/") {
		throw invalid_argument("Invalid Operation");
	}
}

// function do throw an exception if a zero denominator is supplied
void Calc::DivByZ(string operation, double num) {

	if (num == 0 && operation == "/") {
		throw invalid_argument("Divide by Zero");

	}
}
// function to throw an exception if the input formula is not in the correct form
void Calc::WhiteSpace(string formula) {

	if (fabs(formula.find(" ", 0)) > 1000) {
		throw invalid_argument("Invalid Format");
	}

}

/* Main program follows*/


int main()

{
	char selection;
	
// Menu
	label:
	cout << "==============================" << endl;
	cout << "1) CA Plotter                 " << endl;
	cout << "2) Array Sorting              " << endl;
	cout << "3) MadLib                     " << endl;
	cout << "4) Find nth Fibonacci number  " << endl;
	cout << "5) Calculator                 " << endl;
	cout << "=============================="<<endl;
		cout << "Please Make A Selection:";
	cin>> selection;

// handle out-of-range selections
	while (selection !='1' && selection != '2' && selection != '3'&& selection != '4'&& selection != '5') {
		
			cout << "Selection invalid, try again";
			cin >> selection;
		}
	

	if (selection == '1') {
		// Cellular Automaton Module	
			CA cel;
			int a, b, c, d, e, f, g, n;
			int ap, bp, cp, dp, ep, fp, gp;
			int bin[1000];
			int binNum;
			cout << "Please enter the 7-binary-digit seed (i.e. 0001000): ";
			cin >> binNum;
			cout << "Enter number of iterations: ";
			cin >> n;
			// Separate the digits of the seed
			bin[0] = binNum;
			g = binNum % 10;
			binNum /= 10;
			f = binNum % 10;
			binNum /= 10;
			e = binNum % 10;
			binNum /= 10;
			d = binNum % 10;
			binNum /= 10;
			c = binNum % 10;
			binNum /= 10;
			b = binNum % 10;
			binNum /= 10;
			a = binNum % 10;
			binNum /= 10;

			// print the first line by digit 
			// setfill and setw fill out line if there are leading zeroes 

			cout << setfill('0') << setw(7) << bin[0] << endl;
			for (int i = 1; i < n; i++) {
				// use set_x_last to update the relevant numbers from previous line
				// use rthirty() to evaluate the set_x_last values according to Wolfram rule 30
				cel.set_x_last(0, a, b);
				ap = cel.rthirty();
				cout << cel.rthirty();
				cel.set_x_last(a, b, c);
				bp = cel.rthirty();
				cout << cel.rthirty();
				cel.set_x_last(b, c, d);
				cp = cel.rthirty();
				cout << cel.rthirty();
				cel.set_x_last(c, d, e);
				dp = cel.rthirty();
				cout << cel.rthirty();
				cel.set_x_last(d, e, f);
				ep = cel.rthirty();
				cout << cel.rthirty();
				cel.set_x_last(e, f, g);
				fp = cel.rthirty();
				cout << cel.rthirty();
				cel.set_x_last(f, g, 0);
				gp = cel.rthirty();
				cout << cel.rthirty() << endl;
				// reassign values calculated by rthirty as the seed for the next row
				a = ap;
				b = bp;
				c = cp;
				d = dp;
				e = ep;
				f = fp;
				g = gp;
				int app = a * 1000000;
				int bpp = b * 100000;
				int cpp = c * 10000;
				int dpp = d * 1000;
				int epp = e * 100;
				int fpp = f * 10;
				int gpp = g;
				bin[i] = app + bpp + cpp + dpp + epp + fpp + gpp;
			}
			cout << "See result in decimal? (y/n)";

			char Choice;
			cin >> Choice;
			if (Choice == 'y') {
				for (int i = 0; i < n; i++) {
					cel.BinNum(bin[i]);
				}
				cout << "Exit? (y/n) ";
				cin >> Choice;
				if (Choice == 'y') goto exitLab;
				else goto label;
			}
			else {
				cout << "Exit? (y/n) ";
				cin >> Choice;
				if (Choice == 'y') goto exitLab;
				else goto label;
			}
	
	}

	else if (selection == '2') {
		// Sorting Module
		int n, array[1000];
		char Sel, Choice;

		Sort SortIt;

		cout << "Length of Array: ";
		cin >> n;
		cout << "Sorting Method: QuickSort (q), Insertion Sort (i), or Selection Sort (s):";
		cin >> Sel;
		// while loop to handle inapporpriate input. 
		while (Sel != 'q' && Sel != 'i' && Sel != 's') {
			cout << "Sorting Method: QuickSort (q), Insertion Sort (i), or Selection Sort (s):";
			cin >> Sel;
			if (Sel != 'q' && Sel != 'i' && Sel != 's') cout << " Enter Valid Method!" << endl;
		}

		// Format Input Prompt  
		for (int i = 0; i < n; i++) {

			if (i % 10 == 1) {
				cout << endl << "Please enter " << i << "st element: ";
				cin >> array[i];
			}
			else if (i % 10 == 2) {
				cout << endl << "Please enter " << i << "nd element: ";
				cin >> array[i];
			}
			else if (i % 10 == 3) {
				cout << endl << "Please enter " << i << "rd element: ";
				cin >> array[i];
			}
			else {
				cout << endl << "Please enter " << i << "th element: ";
				cin >> array[i];
			}
		}


		if (Sel == 'q')
			SortIt.qSort(array, 0, n - 1);
		else if (Sel == 'i')
			SortIt.iSort(array, n);
		else if (Sel == 's')
			SortIt.sSort(array, n);
		
			cout << "Sorted Array:" << endl;
		for (int i = 0; i < n; i++)
			cout << array[i] << endl;
		
		cout << "Exit? (y/n) ";
		cin >> Choice;
		if (Choice == 'y') goto exitLab;
		else goto label;
		
	}


	else if (selection == '3') {
		//Mad Lib Module
		std::string FName, LName, EngT, ProgL, adj1, noun1, adj2, plnoun1;
		std::string adj3, adj4, adj5, noun2, noun3, Place1, Place2, Place3, Place4;
		int LOT;
		char Sel, Choice;
		MadLib ml;
		Sel = '0';
		// while loop to handle inappropriate input
		while (Sel != '1' && Sel != '2') {
			cout << "MadLib(1) or Original Story(2)? ";
			cin >> Sel;
		}
		if (Sel == '1') {


			cout << "Please Enter a First Name: ";
			cin >> FName;
			cout << endl << "Please Enter an Engineering Discipline (i.e. Nuclear): ";
			cin >> EngT;
			cout << endl << "Please Enter the Name of a Programming Language: ";
			cin >> ProgL;
			cout << endl << "Please Enter an Art Form: ";
			cin >> noun1;
			cout << endl << "Please Enter an Adjective: ";
			cin >> adj2;
			cout << endl << "Please Enter a Plural Noun: ";
			cin >> plnoun1;
			cout << endl << "Please Enter Another Adjective: ";
			cin >> adj3;
			cout << endl << "...and Another (adjective, that is): ";
			cin >> adj4;
			cout << endl << "Last Adjective, I promise: ";
			cin >> adj5;
			cout << endl << "A school subject, please: ";
			cin >> noun2;
			cout << endl << "A college major, please: ";
			cin >> noun3;
			cout << endl << "Now I will ask you to give me 3 place names" << endl;
			cout << "A City: ";
			cin >> Place1;
			cout << endl << "Another City: ";
			cin >> Place3;
			cout << endl << "And One More US State: ";
			cin >> Place4;
			cout << endl << "Finally, Please give me a long length of time (in years)";
			cin >> LOT;

			
			ml.GetLib(FName, LName, EngT, ProgL, adj1, noun1, adj2, plnoun1, adj3, adj4, adj5, noun2,
				noun3, Place1, Place2, Place3, Place4, LOT);
		}
		if (Sel == '2') {

			
			ml.OriginalStory();

		}
		cout << "Exit? (y/n) ";
		cin >> Choice;
		if (Choice == 'y') goto exitLab;
		else goto label;
	}
	
	else if (selection == '4') {
		// Fibonacci Module
			long long int fibNum;
			char Choice;
			Fibs fib;

			cout << " Which Fibonacci number would you like to see? ";
			cin >> fibNum;
			if (fibNum%10 == 1) {
				cout << "The " << fibNum << "st Fibonacci number is " << fib.fibs(fibNum) << ".";
			}else if(fibNum % 10 == 2) {
				cout << "The " << fibNum << "nd Fibonacci number is " << fib.fibs(fibNum) << ".";
			}else if (fibNum % 10 == 3) {
				cout << "The " << fibNum << "rd Fibonacci number is " << fib.fibs(fibNum) << ".";
			}else {
				cout << "The " << fibNum << "th Fibonacci number is " << fib.fibs(fibNum) << ".";

			}
			
			cout << "Exit? (y/n) ";
			cin >> Choice;
			if (Choice == 'y') goto exitLab;
			else goto label;
			
	}
	
	else if (selection == '5') {
		// Calculator Module
		std::string expression, s;
		double num1, num2;
		std::string OpSym, snum1, snum2;
		char Choice;

		
	// Initialize the Calc object
		Calc bin;
		
		cout << "Please enter a formula in the form a + b." <<endl<<"Operations available: +, -, *, / :";
		cin.ignore();
		getline(cin, s);
		FormLab:// Goto Label for testing for proper formula spacing after incorrect input
		try {
			bin.WhiteSpace(s);// throw an exception if formula is improperly formatted
		}
		catch (invalid_argument& e) {
			cerr << e.what() << endl;
			cout << "Please ensure that there are spaces between numbers and operators (a + b) " << endl;
			
			getline(cin, s);
			goto FormLab;

		}
		// splitting the input stream up into it's constituent parts
		istringstream iss(s);
		iss >> snum1;
		iss >> OpSym;
		iss >> snum2;
		num1 = stod(snum1);
		num2 = stod(snum2);
		SymLab:// Goto Label for testing operator symbol after incorrect input
		try {
			bin.opError(OpSym);// throw an exception if invalid symbol is selected
		}
		catch (invalid_argument& f)// catch invalid symbol error
		{
			cerr << f.what() << endl;
			cout << "Please enter a valid operation (+, -, *, /): ";
			cin >> OpSym;		
			goto SymLab;

		}
		
	    DivLab: // Goto Label for testing DivByZero after incorrect input
		try {
			bin.DivByZ(OpSym, num2);// throw if div by zero
		}
		catch (invalid_argument& g)// catch div by zero error
		{
			cerr << g.what() << endl;
			cout << "Please enter a valid denominator: ";
			cin >> num2;
			goto DivLab;
				
		}
		
		cout << num1 << OpSym << num2 << " = " << bin.BinOp(num1, num2, OpSym);
		cout << "Exit? (y/n) ";
		cin >> Choice;
		if (Choice == 'y') goto exitLab;
		else goto label;
	
	}
		
	exitLab:
	return 0;

}

