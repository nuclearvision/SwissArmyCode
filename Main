// SwissArmyCode.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<iostream>
#include<fstream>
#include <string>
#include<sstream>
#include<algorithm>
#include<iterator>
#include<iomanip>
#include<istream>
#include<math.h>
using namespace std;

// Geometry Class
class Geometry {
	double width, height, base,  radius;
public:
	void rect_set_values(double, double);
	void tri_set_values(double, double);
	void circ_set_values(double);
	double rect_area() { return width * height; }
	double tri_area() { return base/2 * height; }
	double circ_area() {return 3.14159*pow(radius, 2);}

};
// Cellular Automaton Class
class CA {
	int seed1, seed2, seed3, seed4, seed5, seed6, seed7;
	int x_last_left, x_last_mid, x_last_right, x_new;
	int rem, dummy, dec, bin, base;
public:
	void set_seed(int, int, int, int, int, int, int);
	void set_x_last(int, int, int);
	void BinNum(int);
	
	/* define rule 30 behavior for each triplet in previous line
	  Rule 30 dictates that each new number will be generated as follows
	  111  110  101  100  011  010  001  000
	   |    |    |    |    |    |    |    |
	   0    0    0    1    1    1    1    0                               */
	int rthirty() {
		if ((x_last_left == 0 && x_last_mid == 0 && x_last_right == 1) ||
			(x_last_left == 0 && x_last_mid == 1 && x_last_right == 0) ||
			(x_last_left == 0 && x_last_mid == 1 && x_last_right == 1) ||
			(x_last_left == 1 && x_last_mid == 0 && x_last_right == 0))
		{
			return 1;
		}
		else
		{
			return 0;
		}

	}
	
	

};
class MadLib {
	std::string FName, LName, EngT, ProgL, adj1, noun1, adj2, plnoun1;
	std::string adj3, adj4, adj5, noun2, noun3, Place1, Place2, Place3, Place4;
	int LOT; 
public:
	void GetLib(std::string, std::string, std::string, std::string,
		std::string, std::string, std::string, std::string,
		std::string, std::string, std::string, std::string,
		std::string, std::string, std::string,std::string,
		std::string, int);
	void OriginalStory();

};
class Fibs {
	int F[2][2], M[2][2];
public:
	void mult(int[2][2], int[2][2]);
	void mPow(int[2][2], int);

	int fibs(int n)
	{
		int F[2][2] = { { 1,1 },{ 1,0 } };
		if (n == 0)
			return 0;
		mPow(F, n - 1);
		return F[0][0];
	}

};
class Calc {
	double x, y;
	std::string operation;
public:
	double BinOp(double x, double y, string operation) {
		if (operation =="+") 	return x + y;
		else if (operation == "-") return x - y;
		else if (operation == "*") return x * y;
		else if (operation == "/") {
			if (y > 0 || y < 0) {
				return x / y;
			}
			else {
				cout << "Div by 0";
			}
		}
		else {
			cout << "Formula Not Valid";
		}
		

	}
	void opError(string operation) {
		if (operation != "+" && operation != "-" && operation != "*" && operation != "/") {
			throw invalid_argument("Invalid Operation");
		}
	};
	void DivByZ(string operation, double num) {

		if (num == 0 && operation == "/") {
			throw invalid_argument("Divide by Zero");

		}
	}
	void WhiteSpace(string formula) {

		if (fabs(formula.find(" ", 0)) > 1000) {
			throw invalid_argument("Invalid Format");
		}

	}



};


// CA functions
//Function to evaluate the set the relevant values for rthirty()

void CA::set_x_last(int x, int y, int z) {
	x_last_left = x;
	x_last_mid = y;
	x_last_right = z;

}
// convert CA line to decimal 
void CA::BinNum(int bin) {
	dummy = bin;
	dec = 0;
	base = 1;
	while (dummy > 0) {
		rem = dummy % 10;
		dec = dec + rem * base;
		base = base * 2;
		dummy = dummy / 10;
	}
	cout <<setfill('0')<<setw(7)<<bin <<" = "<< dec << endl;
}



// Geometry functions
void Geometry::rect_set_values(double x, double y) {
	width = x;
	height = y;
	}
void Geometry::tri_set_values(double x, double y) {
	base = x;
	height = y;
}
void Geometry::circ_set_values(double r) {
	radius = r;
}

// MadLib Functions
void MadLib::GetLib(std::string FName, std::string LName,
	std::string EngT, std::string ProgL, std::string adj1,
	std::string noun1, std::string adj2, std::string plnoun1,
	std::string adj3, std::string adj4, std::string adj5, std::string noun2,
	std::string noun3, std::string Place1, std::string Place2, std::string Place3, std::string Place4, int LOT) {
	cout << FName << " " << LName << "  is a " << EngT << " Engineer who has been" ;
	cout << "coding in " << ProgL << " for approximately " << LOT << " years. Before" ;
	cout << "	discovering that he enjoyed writing " << adj1 << " code, " << FName << " underwent classical " ;
	cout << noun1 << " training during his senior year in high school as well as for three " ;
	cout << " years in college. One " << adj2 << " night, " << FName << " and his " << plnoun1 ;
	cout << " were visiting the “free section” at a " << adj3 << " book store in " << Place1 << " " << Place2 ;
	cout << " where he discovered an " << adj4 << "  , " << adj5 << " " << noun2 << "  book which he used" ;
	cout << "to teach himself " << noun2 << " .Adam enjoyed learning " << noun2 << " so much that he" ;
	cout << " dropped out of " << noun1 << " school in order to pursue " << noun3 << " at the University of ";
	cout << Place3 << " at " << Place4<<"."<< endl;


}
// Fibbonacci Functions
// Matrix multiplication for 2x2 matrices F and M
void Fibs::mult(int F[2][2], int M[2][2]) {
	int x = F[0][0] * M[0][0] + F[0][1] * M[1][0];
	int y = F[0][0] * M[0][1] + F[0][1] * M[1][1];
	int z = F[1][0] * M[0][0] + F[1][1] * M[1][0];
	int w = F[1][0] * M[0][1] + F[1][1] * M[1][1];
	
	F[0][0] = x;
	F[0][1] = y;
	F[1][0] = z;
	F[1][1] = w;

}
// Raise Matrix F to power n
void Fibs::mPow(int F[2][2], int n)
{
	if (n == 0 || n == 1)
		return;
	int M[2][2] = { { 1,1 },{ 1,0 } };
	Fibs fib;
	fib.mPow(F, n / 2);
	fib.mult(F, F);

	if (n % 2 != 0)
		fib.mult(F, M);
}


int main()

{
	int selection, ShapeSel;
	double length, height, radius, base;
// Menu
	label:
	cout << "1) Geometry                   " << endl;
	cout << "2) CA Plotter                 " << endl;
	cout << "3) MadLib                     " << endl;
	cout << "4) Find nth Fibonacci number  " << endl;
	cout << "5) Calculator                 " << endl;
	cout << "=============================="<<endl;
		cout << "Please Make A Selection:";
	cin>> selection;

// handle out-of-range selections
	if (selection < 1 || selection > 5) {
		
		bool SelCrit = false;
		while (SelCrit == false){
			cout << "Selection invalid, try again";
			cin >> selection;
			if (selection >0 && selection < 6) SelCrit = true;
		}
	}
//Geometry module
	if (selection == 1) {
		
		cout << "1) Rectangle Area" << endl;
		cout << "2) Triangle Area " << endl;
		cout << "3) Circle Area   " << endl;
		cout << "Please select shape:";
		cin >> ShapeSel;
		// Rectangle area block
		if (ShapeSel == 1) {
			Geometry rect;
			cout << "Enter Length: ";
			cin >> length;
			cout << "Enter Height: ";
			cin >> height;
			rect.rect_set_values(length, height);
			cout << "This rectangle has an area of: " << rect.rect_area();
			cin.get();
			
		}
		// Triangle area block
		if (ShapeSel == 2) {
			Geometry tri;
			cout << "Enter Base: ";
			cin >> base;
			cout << "Enter Height: ";
			cin >> height;
			tri.tri_set_values(base, height);
			cout << "This triangle has an area of: " << tri.tri_area();
			cin.get();

		}
		// Circle area block
		if (ShapeSel == 3) {
			Geometry circ;
			cout << "Enter radius: ";
			cin >> radius;
			circ.circ_set_values(radius);
			cout << "This triangle has an area of: " << circ.circ_area();
			cin.get();

		}
	}
// Cellular Automaton Module
	else if (selection == 2) {
		
		
		CA cel;
		int a, b, c, d, e, f, g, n;
		int ap, bp, cp, dp, ep, fp, gp;
		int bin[1000];
		int binNum;
		cout << "Please enter the 7-binary-digit seed: ";
		cin >> binNum;
		cout << "Enter number of iterations: ";
		cin >> n;
		// Separate the digits of the seed
		bin[0] = binNum;
		g = binNum % 10;
		binNum /= 10;
		f = binNum % 10;
		binNum /= 10;
		e = binNum % 10;
		binNum /= 10;
		d = binNum % 10;
		binNum /= 10;
		c = binNum % 10;
		binNum /= 10;
		b = binNum % 10;
		binNum /= 10;
		a = binNum % 10;
		binNum /= 10;
		
		
		
		
		// print the first line by digit 
		// setfill and setw fill out line if there are leading zeroes 

		cout << setfill('0') << setw(7) << bin[0]<<endl;
		for (int i = 1; i < n; i++) {
			// use set_x_last to update the relevant numbers from previous line
			// use rthirty() to evaluate the set_x_last values according to Wolfram rule 30
			cel.set_x_last(0, a, b);
			ap = cel.rthirty();
			cout << cel.rthirty();
			cel.set_x_last(a, b, c);
			bp = cel.rthirty();
			cout << cel.rthirty();
			cel.set_x_last(b, c, d);
			cp = cel.rthirty();
			cout << cel.rthirty();
			cel.set_x_last(c, d, e);
			dp = cel.rthirty();
			cout << cel.rthirty();
			cel.set_x_last(d, e, f);
			ep = cel.rthirty();
			cout << cel.rthirty();
			cel.set_x_last(e, f, g);
			fp = cel.rthirty();
			cout << cel.rthirty();
			cel.set_x_last(f, g, 0);
			gp = cel.rthirty();
			cout << cel.rthirty() << endl;
		 // reassign values calculated by rthirty as the seed for the next row
			a = ap;
			b = bp;
			c = cp;
			d = dp;
			e = ep;
			f = fp;
			g = gp;
			int app = a * 1000000;
			int bpp = b * 100000;
			int cpp = c * 10000;
			int dpp = d * 1000;
			int epp = e * 100;
			int fpp = f * 10;
			int gpp = g;
			bin[i] = app + bpp + cpp + dpp + epp + fpp + gpp;
		}
		cout << "See result in decimal? (y/n)";
		
		char Choice;
		cin >> Choice;
		if (Choice == 'y') {
			for (int i = 0; i < n; i++) {
				cel.BinNum(bin[i]);
			}
			
		}
		else {
			cout << "Exit? (y/n) ";
			cin >> Choice;
			if (Choice == 'y') goto exitLab;
			else goto label;
		}

	}

//Mad Lib Module
	else if (selection == 3) {
		std::string FName, LName, EngT, ProgL, adj1, noun1, adj2, plnoun1;
		std::string adj3, adj4, adj5, noun2, noun3, Place1, Place2, Place3, Place4;
		int LOT;
		cout << "Please Enter a First Name: ";
		cin >> FName;
		cout << endl << "Please Enter a Surname: ";
		cin >> LName;
		cout << endl << "Please Enter an Engineering Discipline (i.e. Nuclear): ";
		cin >> EngT;
		cout << endl << "Please Enter the Name of a Programming Language: ";
		cin >> ProgL;
		cout << endl << "Please Enter an Adjective: ";
		cin >> adj1;
		cout<< endl << "Please Enter a Noun: ";
		cin >> noun1;
		cout << endl << "Please Enter another Adjective: ";
		cin >> adj2;
		cout << endl << "Please Enter a Plural Noun: ";
		cin >> plnoun1;
		cout << endl << "Please Enter Yet Another Adjective: ";
		cin >> adj3;
		cout << endl << "...and Another (adjective, that is): ";
		cin >> adj4;
		cout << endl << "Last Adjective, I promise: ";
		cin >> adj5;
		cout << endl << "A school subject, please: ";
		cin >> noun2;
		cout << endl << "A college major, please: ";
		cin >> noun3;
		cout << endl << "Now I will ask you to give me 4 place names" << endl;
		cout << "A City: ";
		cin >> Place1;
		cout << endl << "A US State: ";
		cin >> Place2;
		cout << endl << "Another City: ";
		cin >> Place3;
		cout << endl << "And One More US State: ";
		cin >> Place4;
		cout << endl << "Finally, Please give me an integer";
		cin >> LOT;

		MadLib ml;
		ml.GetLib(FName, LName, EngT, ProgL, adj1, noun1, adj2, plnoun1, adj3, adj4, adj5, noun2,
			noun3, Place1, Place2, Place3, Place4, LOT);










	}
	else if (selection == 4) {
			int fibNum;
			Fibs fib;
			cout << " Which Fibonacci number would you like to see? ";
			cin >> fibNum;
			if (fibNum%10 == 1) {
				cout << "The " << fibNum << "st Fibonacci number is " << fib.fibs(fibNum) << ".";
			}else if(fibNum % 10 == 2) {
				cout << "The " << fibNum << "nd Fibonacci number is " << fib.fibs(fibNum) << ".";
			}else if (fibNum % 10 == 3) {
				cout << "The " << fibNum << "rd Fibonacci number is " << fib.fibs(fibNum) << ".";
			}else {
				cout << "The " << fibNum << "th Fibonacci number is " << fib.fibs(fibNum) << ".";

			}


			
			return 0;
		
			
	}
	
	else if (selection == 5) {

		std::string expression, s;
		double num1, num2;
		std::string OpSym, snum1, snum2;

		CalcLab:
	// Initialize the Calc object
		Calc bin;
		
		cout << "Please enter a formula in the form a + b." <<endl<<"Operations available: +, -, *, / :";
		cin.ignore();
		getline(cin, s);
		FormLab:// Goto Label for testing for proper formula spacing after incorrect input
		try {
			bin.WhiteSpace(s);// throw an exception if formula is improperly formatted
		}
		catch (invalid_argument& e) {
			cerr << e.what() << endl;
			cout << "Please ensure that there are spaces between numbers and operators (a + b) " << endl;
			
			getline(cin, s);
			goto FormLab;

		}
		// splitting the input stream up into it's constituent parts
		istringstream iss(s);
		iss >> snum1;
		iss >> OpSym;
		iss >> snum2;
		num1 = stod(snum1);
		num2 = stod(snum2);
		SymLab:// Goto Label for testing operator symbol after incorrect input
		try {
			bin.opError(OpSym);// throw an exception if invalid symbol is selected
		}
		catch (invalid_argument& f)// catch invalid symbol error
		{
			cerr << f.what() << endl;
			cout << "Please enter a valid operation (+, -, *, /): ";
			cin >> OpSym;		
			goto SymLab;

		}
		
	    DivLab: // Goto Label for testing DivByZero after incorrect input
		try {
			bin.DivByZ(OpSym, num2);// throw if div by zero
		}
		catch (invalid_argument& g)// catch div by zero error
		{
			cerr << g.what() << endl;
			cout << "Please enter a valid denominator: ";
			cin >> num2;
			goto DivLab;
				
		}
		
		

		

		cout << num1 << OpSym << num2 << " = " << bin.BinOp(num1, num2, OpSym);
	}
		
		
	
	


	
	exitLab:
	return 0;

}

